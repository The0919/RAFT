#!/usr/bin/env python3
import argparse, socket, time, json, select, struct, sys, math, os, random
from enum import Enum

BROADCAST = "FFFF"
UNKNOWN_ID = 'FFFF'
# Time in seconds before sending a new heartbeat
HEARTBEAT_INTERVAL = .25

# Time in seconds before starting a new election during an ongoing election if the
# candidate has not heard from a new leader
ELECTION_TIMEOUT = 1

# Represents the possible types of messages a replica could receive
class MessageType(Enum):
  HELLO = 'hello'
  GET = 'get'
  PUT = 'put'
  REDIRECT = 'redirect'
  APPEND = 'append'
  APPEND_ACK = 'ack'
  OK = 'ok'
  REQUEST_VOTE = 'vote'
  REQUEST_VOTE_ACK = 'vote ack'
  FAIL = 'fail'

# Represents the possible states of a replica
class State(Enum):
  LEADER = 'leader'
  FOLLOWER = 'follower'
  CANDIDATE = 'candidate'

# Represents an entry in a replica's log, including the key-value pair submitted by the put
# message, the current term when the message was received, the MID of the original message 
# and the id of the client the put the data
class LogEntry:
  def __init__(self, term_id: int, key: str, value: str, mid: str, putter: str):
    self.term_id = term_id
    self.key = key
    self.value = value
    self.mid = mid
    self.putter = putter

  # Converts this data into a dict
  def to_dict(self):
    return {
      'term': self.term_id,
      'key': self.key,
      'value': self.value,
      'MID': self.mid,
      'putter': self.putter
    }

  def __str__(self):
    return str(self.to_dict())

  def __repr__(self):
    return self.__str__()

  # Turns a dict with the required fields into an object of this type
  @staticmethod
  def from_dict(d: dict):
    return LogEntry(d['term'], d['key'], d['value'], d['MID'], d['putter'])

  def __eq__(self, other):
    return (
        self.term_id == other.term_id
        and self.key == other.key
        and self.value == other.value
    )


# Takes a string message from a client and turns it into 
def parse_msg(s: str):
  parsed = json.loads(s)
  parsed['type'] = MessageType(parsed['type'])
  return parsed

class Replica:
  def __init__(self, port, id, others):
    self.assumed_leader = UNKNOWN_ID
    self.state = State.FOLLOWER
    self.term_number = 0
    self.port = port
    self.id = id
    self.others = others
    self.votes = None
    self.votedFor = None
    self.heartbeat_timeout = random.uniform(.5, 1.0)

    self.log: list[LogEntry] = []
    self.commit_index = -1
    self.values = {}
    self.follower_confirmed_indices = dict.fromkeys(others, -1)

    self.request_queue = []
    # key: MID, value: (# of acks for put, responded to client yet?)
    self.put_status = {}

    self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    self.socket.bind(('localhost', 0))

    self.not_responded_puts = []
    self.freq = {}
    for t in MessageType:
      self.freq[t.value] = 0

    self.timer = time.time()

    print("Replica %s starting up" % self.id, flush=True)
    self.send({}, BROADCAST, MessageType.HELLO)
    print("Sent hello message.", flush=True)

    self.MESSAGE_HANDLING = {
      State.LEADER: {
        MessageType.GET: self.handle_get,
        MessageType.PUT: self.handle_put,
        MessageType.APPEND_ACK: self.handle_append_ack,
        MessageType.REQUEST_VOTE: lambda msg: self.update_term(msg['term'])
      }, State.FOLLOWER: {
        MessageType.GET: self.handle_redirect,
        MessageType.PUT: self.handle_redirect,
        MessageType.APPEND: self.handle_append,
        MessageType.REQUEST_VOTE: self.handle_vote_request
      }, State.CANDIDATE: {
        MessageType.GET: self.handle_defer,
        MessageType.PUT: self.handle_defer,
        MessageType.REQUEST_VOTE: self.handle_vote_request,
        MessageType.REQUEST_VOTE_ACK: self.handle_vote_request_ack,
        MessageType.APPEND: self.handle_append
      }
    }

  def handle_msg(self, msg: dict):
    msg_type = msg['type']
    #print("Recieved Message:", self.state)
    if msg_type in self.MESSAGE_HANDLING[self.state]:
      self.MESSAGE_HANDLING[self.state][msg_type](msg)

  def send(self, message: dict, to: str, t: MessageType):
    self.freq[t.value] += 1
    #print("Sent:", t.value, 'freqs:', self.freq, flush=True)
    message.update({
      'type': t.value,
      'src': self.id,
      'dst': to,
      'leader': self.assumed_leader
    })
    if to not in self.others and to != self.id:
      print("SENT MESSAGE TO CLIENT", message)
    self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

  def run(self):
    while True:
      #print(self.commit_index, len(self.values), flush=True)
      if self.state == State.LEADER:
        print('STILL HAVE NOT RESPONDED TO: ', self.not_responded_puts)
      if self.state == State.LEADER and time.time() - self.timer > HEARTBEAT_INTERVAL:
        print("HEARTBEAT SENT", flush=True)
        self.timer = time.time()
        for other in self.others:
          self.send_append(other, [])

      if (self.state == State.FOLLOWER and time.time() - self.timer > self.heartbeat_timeout)\
          or (self.state == State.CANDIDATE and time.time() - self.timer > ELECTION_TIMEOUT):
        print("NO HEARTBEAT, 'lection time", flush=True)
        self.timer = time.time()
        self.start_election()
    
      readable, writable, exceptional = select.select([self.socket], [], [], .5)
      if len(readable) > 0:
        data, addr = self.socket.recvfrom(65535)
        msg = data.decode('utf-8')

        print("Received message '%s'" % (msg,), flush=True)
        self.handle_msg(parse_msg(msg))

  def update_term(self, term):
    if self.term_number < term:
      if self.state == State.LEADER or self.state == State.CANDIDATE:
        self.assumed_leader = UNKNOWN_ID
        self.state = State.FOLLOWER
      self.votedFor = None
      self.term_number = term

  def handle_redirect(self, msg):
    if self.assumed_leader == UNKNOWN_ID:
      self.handle_defer(msg)
      return
    self.send({'MID': msg['MID']}, msg['src'], MessageType.REDIRECT)

  def handle_defer(self, msg):
    self.request_queue.append(msg)

  def handle_vote_request_ack(self, msg):
    self.update_term(msg['term'])
    voted_for, total_votes = self.votes
    if msg['voteGranted']:
      voted_for += 1
      total_votes += 1
    else:
      total_votes += 1
    if voted_for > (len(self.others)+1) // 2:
      print("I WON THE ELECTRON", flush=True)
      self.state = State.LEADER
      self.assumed_leader = self.id
      for other in self.others:
        self.follower_confirmed_indices[other] = self.commit_index
      self.process_queue()
      for other in self.others:
        self.send_append(other)
    self.votes = voted_for, total_votes

  def start_election(self):
    self.votes = 1, 1
    self.term_number += 1
    self.votedFor = self.id
    self.assumed_leader = UNKNOWN_ID
    self.state = State.CANDIDATE
    self.request_queue = []
    last_term = self.term_number if len(self.log) == 0 else self.log[-1].term_id
    self.send({
      'term':self.term_number,
      'candidateId':self.id,
      'lastLogIndex': len(self.log)-1,
      'lastLogTerm': last_term
      }, BROADCAST, MessageType.REQUEST_VOTE)

  def handle_vote_request(self, msg: dict):
    #print("GOT VOTE REQUEST", flush=True)
    self.timer = time.time()
    candidate_id, candidate_log_index, candidate_term =\
        msg['candidateId'], msg['lastLogIndex'], msg['term']
    self.update_term(candidate_term)
    grant_vote = (
        (self.votedFor is None or self.votedFor == candidate_id)
        and candidate_term >= self.term_number
        and candidate_log_index >= len(self.log)-1)
    if grant_vote:
      #print("VOTED FOR", candidate_id, self.term_number, flush=True)
      self.votedFor = candidate_id
    self.send({
      'term': self.term_number,
      'voteGranted': grant_vote
      }, candidate_id, MessageType.REQUEST_VOTE_ACK)

  def process_queue(self):
    while len(self.request_queue) > 0:
      self.handle_msg(self.request_queue.pop())

  def handle_get(self, msg: dict):
    key = msg['key']
    value = self.values[key] if key in self.values else ''
    self.send({'value': value, 'MID': msg['MID']}, msg['src'], MessageType.OK)

  def handle_put(self, msg: dict):
    key, value = msg['key'], msg['value']
    # add the message to the log
    self.log.append(LogEntry(self.term_number, key, value, msg['MID'], msg['src']))
    self.put_status[msg['MID']] = 0, False
    # send append RPCs
    self.not_responded_puts.append(msg['MID'])
    for follower in self.others:
      self.send_append(follower)

  def handle_append_ack(self, msg: dict):
    follower, term, success = msg['src'], msg['term'], msg['success']
    self.update_term(term)
    if len(self.log) <= msg['confirmed_index']:
      self.state = State.FOLLOWER
      return
    mid = self.log[msg['confirmed_index']].mid
    if mid in self.put_status:
      ack_count, already_responded = self.put_status[mid]
      self.put_status[mid] = ack_count + 1, already_responded

    confirmed_index = msg['confirmed_index']
    confirmed_at_least = lambda f: self.follower_confirmed_indices[f] >= confirmed_index
    majority_confirmed = lambda: len(list(filter(confirmed_at_least, self.others)))+1 > (len(self.others)+1) // 2
    if success:
      # update confirmed index for follower
      self.follower_confirmed_indices[follower] = confirmed_index
      # update commit index if a majority of followers have confirmed up to at least
      if not already_responded and majority_confirmed():
        self.commit_to(confirmed_index)
        for other in self.others:
          self.send_append(other, [])
    else:
      self.follower_confirmed_indices[follower] -= 1
      self.send_append(follower)

  # commit the log up until _index_
  # send OKs for applicable puts if self is the leader
  def commit_to(self, index):
    to = min(index, len(self.log) - 1)
    ci = self.commit_index + 1
    self.commit_index = max(self.commit_index, to)
    for i in range(ci, to + 1):
      entry = self.log[i]
      self.values[entry.key] = entry.value
      if self.state == State.LEADER and entry.mid in self.not_responded_puts:
        self.send({'MID': entry.mid}, entry.putter, MessageType.OK)
        self.not_responded_puts.remove(entry.mid)
        self.put_status[entry.mid] = 0, True

  # handle an append message from the self-proclaimed leader
  # update the term and demote self if applicable, then send an acknowledgement
  # if append was not a heartbeat
  def handle_append(self, msg: dict):
    self.timer = time.time()
    leader_term, prev_log_index, leader_commit, prev_log_term \
      = msg['term'], msg['prev_log_index'], msg['leader_commit'], msg['prev_log_term']
    entries = list(map(LogEntry.from_dict, msg['entries']))
    if leader_term >= self.term_number:
      self.assumed_leader = msg['src']
      self.term_number = leader_term
      self.state = State.FOLLOWER
      self.votedFor = None
      self.process_queue()
    self.commit_to(leader_commit)
    # this was a heartbeat append message
    if len(msg['entries']) == 0:
      return
    success = (
        leader_term >= self.term_number
        and (prev_log_index == -1 or (prev_log_index < len(self.log)
        and prev_log_term == self.log[prev_log_index].term_id))
    )
    if success:
      self.update_log(entries, prev_log_index + 1)
    confirmed_index = len(self.log) - 1
    response = {
      'term': self.term_number,
      'success': success,
      'confirmed_index': confirmed_index
    }
    self.send(response, msg['src'], MessageType.APPEND_ACK)

  # update the log with a list of new entries given the index to begin updating from
  def update_log(self, entries: list, offset: int):
    for i in range(len(entries)):
      log_index = offset + i
      if not log_index < len(self.log) or self.log[log_index] != entries[i]:
        self.log = self.log[:log_index] + entries[i:]
        break

  # send an APPEND message to a particular follower. exclude _entries_ to automatically
  # include all entries from the last confirmed for the follower to the end of the current log
  def send_append(self, follower: str, entries=None):
      prev_log_index = self.follower_confirmed_indices[follower]
      # Log is empty/prev_log_index starts as -1, creates index error
      # sets prev_log_term to self term number, probably not right!!
      prev_log_term = self.term_number if prev_log_index < 0 or prev_log_index >= len(self.log)\
          else self.log[prev_log_index].term_id
      if entries is None:
        entries = list(map(lambda entry: entry.to_dict(), self.log[max(prev_log_index + 1, 0):]))
      response = {
        'term': self.term_number,
        'prev_log_index': prev_log_index,
        'prev_log_term': prev_log_term,
        'entries': entries,
        'leader_commit': self.commit_index
      }

      self.send(response, follower, MessageType.APPEND)

if __name__ == "__main__":
  parser = argparse.ArgumentParser(description='run a key-value store')
  parser.add_argument('port', type=int, help="Port number to communicate")
  parser.add_argument('id', type=str, help="ID of this replica")
  parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
  args = parser.parse_args()
  replica = Replica(args.port, args.id, args.others)
  replica.run()

