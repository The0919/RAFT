#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os
from enum import Enum

BROADCAST = "FFFF"
UNKNOWN_ID = 'FFFF'

class MessageType(Enum):
  GET = 'get'
  PUT = 'put'
  REDIRECT = 'redirect'
  APPEND = 'append'

class Replica:
  def __init__(self, port, id, others):
    self.assumed_leader = UNKNOWN_ID
    self.term_number = 0
    self.port = port
    self.id = id
    self.others = others

    self.log = []
    self.values = {}

    self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    self.socket.bind(('localhost', 0))

    print("Replica %s starting up" % self.id, flush=True)
    hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
    self.send(hello)
    print("Sent hello message: %s" % hello, flush=True)

  def send(self, message: dict):
    message.update({
      'src': self.id,
      'dest':
    })
    self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

  def run(self):
    while True:
      data, addr = self.socket.recvfrom(65535)
      msg = data.decode('utf-8')

      print("Received message '%s'" % (msg,), flush=True)
      self.handle_msg(json.loads(msg))

  def handle_msg(self, msg: dict):
    if self.id == self.assumed_leader:
      if msg['type'] == 'get':
        key = msg['key']
        if key in self.values:
          self.send({''})
      elif msg['type'] == 'put':
        self.handle_put(msg)
  def handle_put(self, msg: dict):


if __name__ == "__main__":
  parser = argparse.ArgumentParser(description='run a key-value store')
  parser.add_argument('port', type=int, help="Port number to communicate")
  parser.add_argument('id', type=str, help="ID of this replica")
  parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
  args = parser.parse_args()
  replica = Replica(args.port, args.id, args.others)
  replica.run()
